apiVersion: apps/v1
kind: Deployment
metadata:
  # name: {{ include "mims-server-chart.fullname" . }}
  name: {{ .Values.deploy.name }}
  labels:
    {{- include "mims-server-chart.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "mims-server-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "mims-server-chart.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: content-store
          persistentVolumeClaim:
            claimName: oke-fsspvc
      containers:
        - name: sidecar-model-loader
          image: "{{ .Values.image.repository }}:{{ .Values.image.scTag | default .Chart.AppVersion }}"
          volumeMounts:
            - name: content-store
              mountPath: /apps/store
          env:
            - name: TARGET_ENV
              value: "{{ .Values.deploy.targetEnv }}"
            - name: CONDA_HOME
              value: "{{ .Values.deploy.condaEnv }}"
            - name: SERVER_PORT
              value: "{{ .Values.container.port }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          volumeMounts:
            - name: content-store
              mountPath: /apps/store
          env:
            - name: COMPUTE_TYPE
              value: "{{ .Values.platform.type }}"
            - name: MIS_SERVICE_NAME
              value: "{{ .Values.service.name }}"
            - name: MIS_RES_MGR_SERVICE_PORT
              value: "{{ .Values.service.port }}"
            - name: CRYPTOGRAPHY_OPENSSL_NO_LEGACY
              value: "true"
            - name: TARGET_ENV
              value: "{{ .Values.deploy.targetEnv }}"
            - name: IMAGE_ID
              value: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
            - name: DEPLOYMENT_NAME
              value: {{ .Values.deploy.name }}
            - name: DEPLOYMENT_ID
              value: "{{ .Values.deploy.id }}"
            - name: DEPLOYMENT_PIPELINE_OCID
              value: "{{ .Values.deploy.pipelineId }}"
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_SVC_ACCOUNT
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.container.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/v1/{{ .Values.deploy.targetEnv }}/{{ .Values.deploy.condaEnv }}{{ .Values.container.healthCheckUrl }}
              port: http
              httpHeaders:
              - name: probe-type
                value: liveness
            initialDelaySeconds: {{ .Values.container.delaySeconds }}
            periodSeconds: {{ .Values.container.periodSeconds }}
          readinessProbe:
            httpGet:
              path: /api/v1/{{ .Values.deploy.targetEnv }}/{{ .Values.deploy.condaEnv }}{{ .Values.container.healthCheckUrl }}
              port: http
              httpHeaders:
              - name: probe-type
                value: readiness
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mis-res-mgr  # Sets Deployment name
  namespace: ds-mmis-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mis-res-mgr
  template:
    metadata:
      labels:
        app: mis-res-mgr
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: mis-res-mgr
          image: "{{ .Values.image.repository }}:{{ .Values.image.rmTag }}"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: postgres-config
          ports:
            - name: http
              containerPort: {{ .Values.container.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/v1{{ .Values.container.healthCheckUrl }}
              port: http
              httpHeaders:
              - name: probe-type
                value: liveness
            initialDelaySeconds: {{ .Values.container.delaySeconds }}
            periodSeconds: {{ .Values.container.periodSeconds }}
          readinessProbe:
            httpGet:
              path: /api/v1{{ .Values.container.healthCheckUrl }}
              port: http
              httpHeaders:
              - name: probe-type
                value: readiness
